#!/usr/bin/env ruby
# vim: set filetype=ruby:
$: << File.expand_path("../../lib/", __FILE__)

require 'adash'
require 'optparse'

def run_sub_command(adash, subcmd, argv)
  case subcmd
  when 'init'
    init_opt = OptionParser.new
    init_opt.on('-h', '--help') {
      puts 'init help'
    }
    is_test = false
    init_opt.on('-t', '--test') {
      is_test = true
      puts 'TEST MODE'
    }
    argv = init_opt.parse(argv)
    if argv.size < 2
      puts 'Usage: adash init name device_model'
      1
    else
      name = argv.shift
      device_model = argv.shift
      adash.sub_init(name, device_model, is_test)
    end
  when 'list'
    adash.sub_list
  when 'deregistrate'
    if argv.size < 1
      puts 'Usage: adash deregistrate name'
      1
    else
      name = argv.shift
      adash.sub_deregistrate(name)
    end
  when 'list-slot'
    if argv.size < 1
      puts 'Usage: adash list-slot name'
      1
    else
      name = argv.shift
      adash.sub_list_slot(name)
    end
  when 'replenish'
    if argv.size < 1
      puts 'Usage: adash replenish name [slot_id]'
      1
    else
      name = argv.shift
      slot_id = argv.first&.start_with?('-') ? nil : argv.shift
      adash.sub_replenish(name, slot_id)
    end
  else
    $stderr.puts "no such sub-command: #{subcmd}"
    2
  end
end

def help
  puts 'adash sub-command'
  puts 'sub-commands:'
  puts '  init'
  puts '  list'
  puts '  list-slot'
  puts '  replenish'
end

opt = OptionParser.new
opt.on('-h', '--help') {
  help
}

adash = Adash::Manager.new

argv = opt.order(ARGV)
if argv.empty?
  help
else
  subcmd = argv.shift
  ret = run_sub_command(adash, subcmd, argv)
  exit ret if ret != 0
end
